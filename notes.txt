Experiment 1: Logic Engine Scaling

Setup:
This experiment uses the standard settings. To analyze the scale of the logic engine, the focus lies on the ForwardChaining class.
As indicator of the scaling we measure the total execution time of the "reason" method for one epoch. Each call to the ForwardChaining 
class is timed and logged. This is done for each value of n_classes ([1,10]). The results are then plotted.

Conclusion:
The results of the experiment are shown in figure X. Since execution time is dependent on software and hardware we only interpret the relation 
and not the actual execution time. The graph clearly indicates an exponential function for the relation between the allowed number of digit 
classes and the total execution time of the ForwardChaining class. This result can be explained by looking at the impact of n_classes on the ForwardChaining
class. If the allowed number of digit classes increases, it also increases the amount of examples, amount of queries and therefor the amount of And-Or-Trees
generated.

From this experiment we can conclude that the scaling of the logic engine is suboptimal in the current state and there is room for potential speed ups.
Mainly looking at the amount of operations that are repeated. The forward chaining algorithm is always executed from scratch, inferring numerous facts with no 
memory. This calls for the use of some sort of caching to speed up the logic engine and avoid duplicate work. 


Experiment 4: System scaling

Setup:
This experiment uses the standard settings. To analyze the scale of the entire system, the focus lies on the total execution time of one epoch.
As indicator of the scaling we measure the total execution time of one epoch. Each epoch is timed and logged. This is done for incremental values of num_digit ([1,5]). 
The results are then plotted.

Conclusion:
The results of the experiment are shown in figure X. Since execution time is dependent on software and hardware we only interpret the relation 
and not the actual execution time. The graph clearly indicates an extreme exponential function for the relation between the number of digits in the addition 
and the total execution time of the system. This result can be explained by looking at the impact of num_digits on the system. 
If the number of digits in addition increases, it also increases the amount of potential sums, amount of queries and therefor the amount of And-Or-Trees
generated.

From this experiment we can conclude that the scaling of the logic engine is suboptimal in the current state and there is room for potential speed ups.
Mainly looking at the amount of operations that are repeated. The forward chaining algorithm is always executed from scratch, inferring numerous facts with no 
memory. This calls for the use of some sort of caching to speed up the logic engine and avoid duplicate work.